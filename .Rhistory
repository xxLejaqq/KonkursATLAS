library(purrr) #cleaning
library(repurrrsive)
library(datarium)
library(ggeasy)
library(rio) #wczytywanie plików
library(rvest) #scrappowanie
library(caret)
set.seed(42)
# Podział danych na treningowe i testowe (70%/30%)
train_indices <- sample(1:nrow(dane_atlas_clear_no_na), 0.7 * nrow(dane_atlas_clear_no_na))
dane_atlas_clear_no_na <- na.omit(dane_atlas_clear)
# Importowanie danych
dane_atlas <- import("data_atlas.csv")
# Zamiana pustych pól na NA
dane_atlas[dane_atlas == ""] <- NA
# Tworzenie nowej ramki danych z przekształconymi kolumnami
dane_atlas_clear <- data.frame(
Wiek = dane_atlas$age,
Dochód = as.numeric(gsub(" złoty", "", dane_atlas$income)),
Dzieci = as.integer(
gsub(" dzieci", "",
recode(dane_atlas$children, "brak" = "0 dzieci"))
),
Historia_kredytowa = dane_atlas$credit_history,
Zaległe_płatności = as.integer(
recode(dane_atlas$overdue_payments,
"opóźnienia" = "1",
"brak opóźnień" = "0",
"2" = "1",
"3" = "1")
),
Wartość_aktywów = as.numeric(
gsub(" złoty", "", dane_atlas$assets_value)
),
Posiada_własność = as.integer(
recode(dane_atlas$owns_property,
"tak" = "1",
"nie" = "0")
),
Aktywne_pożyczki = dane_atlas$active_loans,
Lata_w_pracy = dane_atlas$years_in_job,
Typ_zatrudnienia = dane_atlas$employment_type,
Inne_pożyczki = dane_atlas$other_loans,
Edukacja = dane_atlas$education,
Miasto = dane_atlas$city,
Stan_małżeński = dane_atlas$marital_status,
# Zaokrąglenie kolumny Wskaźnik_wsparcia do dwóch miejsc po przecinku
Wskaźnik_wsparcia = round(dane_atlas$support_indicator, 2),
Ryzyko_kredytowe = dane_atlas$credit_risk
)
# Aktualizacja kolumny 'Ryzyko_kredytowe' na podstawie warunków
dane_atlas_clear$Ryzyko_kredytowe <- ifelse(
apply(dane_atlas_clear, 1, function(w) any(is.na(w))) & dane_atlas_clear$Ryzyko_kredytowe == 0,
1,
dane_atlas_clear$Ryzyko_kredytowe
)
# Filtrowanie danych dla osób bez ryzyka kredytowego
filtered_data_atlas_clear <- subset(dane_atlas_clear, Ryzyko_kredytowe == 0)
# Tworzenie wykresu Box Plot + Violin Plot
ggplot(filtered_data_atlas_clear, aes(x = "", y = Wiek)) +
geom_violin(fill = "pink", alpha = 0.7, color = "black") +  # Violin Plot
geom_boxplot(width = 0.2, fill = "skyblue", color = "black", outlier.shape = NA) +  # Box Plot
labs(title = "Rozkład wieku osób bez ryzyka kredytowego", y = "Wiek", x = "") +
theme_minimal()
set.seed(42)
# Podział danych na treningowe i testowe (70%/30%)
train_indices <- sample(1:nrow(dane_atlas_clear_no_na), 0.7 * nrow(dane_atlas_clear_no_na))
train_data <- dane_atlas_clear_no_na[train_indices, ]
test_data <- dane_atlas_clear_no_na[-train_indices, ]
# Regresja logistyczna
log_model <- glm(Ryzyko_kredytowe ~ ., data = train_data, family = binomial)
# Predykcja na zbiorze testowym
log_preds <- predict(log_model, newdata = test_data, type = "response")
library(rpart)
library(rpart.plot)
# Trening drzewa decyzyjnego
tree_model <- rpart(Ryzyko_kredytowe ~ ., data = train_data, method = "class")
# Wizualizacja drzewa
rpart.plot(tree_model, type = 3, extra = 102)
# Predykcja
tree_preds <- predict(tree_model, newdata = test_data, type = "class")
View(dane_atlas_clear_no_na)
str(dane_atlas_clear_no_na)
# Importowanie danych
dane_atlas <- import("data_atlas.csv")
# Zamiana pustych pól na NA
dane_atlas[dane_atlas == ""] <- NA
# Tworzenie nowej ramki danych z przekształconymi kolumnami
dane_atlas_clear <- data.frame(
Wiek = dane_atlas$age,
Dochód = as.numeric(gsub(" złoty", "", dane_atlas$income)),
Dzieci = as.integer(
gsub(" dzieci", "",
recode(dane_atlas$children, "brak" = "0 dzieci"))
),
Historia_kredytowa = dane_atlas$credit_history,
Zaległe_płatności = as.integer(
recode(dane_atlas$overdue_payments,
"opóźnienia" = "1",
"brak opóźnień" = "0",
"2" = "1",
"3" = "1")
),
Wartość_aktywów = as.numeric(
gsub(" złoty", "", dane_atlas$assets_value)
),
Posiada_własność = as.integer(
recode(dane_atlas$owns_property,
"tak" = "1",
"nie" = "0")
),
Aktywne_pożyczki = dane_atlas$active_loans,
Lata_w_pracy = dane_atlas$years_in_job,
Typ_zatrudnienia = dane_atlas$employment_type,
Inne_pożyczki = dane_atlas$other_loans,
Edukacja = dane_atlas$education,
Miasto = dane_atlas$city,
Stan_małżeński = dane_atlas$marital_status,
# Zaokrąglenie kolumny Wskaźnik_wsparcia do dwóch miejsc po przecinku
Wskaźnik_wsparcia = round(dane_atlas$support_indicator, 2),
Ryzyko_kredytowe = dane_atlas$credit_risk
)
# Aktualizacja kolumny 'Ryzyko_kredytowe' na podstawie warunków
dane_atlas_clear$Ryzyko_kredytowe <- ifelse(
apply(dane_atlas_clear, 1, function(w) any(is.na(w))) & dane_atlas_clear$Ryzyko_kredytowe == 0,
1,
dane_atlas_clear$Ryzyko_kredytowe
)
dane_atlas_clear
dane_atlas_clear_no_na <- na.omit(dane_atlas_clear)
dane_atlas_clear_no_na
# Importowanie danych
dane_atlas <- import("data_atlas.csv")
# Zamiana pustych pól na NA
dane_atlas[dane_atlas == ""] <- NA
# Tworzenie nowej ramki danych z przekształconymi kolumnami
dane_atlas_clear <- data.frame(
Wiek = dane_atlas$age,
Dochód = as.numeric(gsub(" złoty", "", dane_atlas$income)),
Dzieci = as.integer(
gsub(" dzieci", "",
recode(dane_atlas$children, "brak" = "0 dzieci"))
),
Historia_kredytowa = dane_atlas$credit_history,
Zaległe_płatności = as.integer(
recode(dane_atlas$overdue_payments,
"opóźnienia" = "1",
"brak opóźnień" = "0",
"2" = "1",
"3" = "1")
),
Wartość_aktywów = as.numeric(
gsub(" złoty", "", dane_atlas$assets_value)
),
Posiada_własność = as.integer(
recode(dane_atlas$owns_property,
"tak" = "1",
"nie" = "0")
),
Aktywne_pożyczki = dane_atlas$active_loans,
Lata_w_pracy = dane_atlas$years_in_job,
Typ_zatrudnienia = dane_atlas$employment_type,
Inne_pożyczki = dane_atlas$other_loans,
Edukacja = dane_atlas$education,
Miasto = dane_atlas$city,
Stan_małżeński = dane_atlas$marital_status,
# Zaokrąglenie kolumny Wskaźnik_wsparcia do dwóch miejsc po przecinku
Wskaźnik_wsparcia = round(dane_atlas$support_indicator, 2),
Ryzyko_kredytowe = dane_atlas$credit_risk
)
# Aktualizacja kolumny 'Ryzyko_kredytowe' na podstawie warunków
dane_atlas_clear$Ryzyko_kredytowe <- ifelse(
apply(dane_atlas_clear, 1, function(w) any(is.na(w))) & dane_atlas_clear$Ryzyko_kredytowe == 0,
1,
dane_atlas_clear$Ryzyko_kredytowe
)
dane_atlas_clear_no_na <- na.omit(dane_atlas_clear)
# Filtrowanie danych dla osób bez ryzyka kredytowego
filtered_data_atlas_clear <- subset(dane_atlas_clear, Ryzyko_kredytowe == 0)
# Tworzenie wykresu Box Plot + Violin Plot
ggplot(filtered_data_atlas_clear, aes(x = "", y = Wiek)) +
geom_violin(fill = "pink", alpha = 0.7, color = "black") +  # Violin Plot
geom_boxplot(width = 0.2, fill = "skyblue", color = "black", outlier.shape = NA) +  # Box Plot
labs(title = "Rozkład wieku osób bez ryzyka kredytowego", y = "Wiek", x = "") +
theme_minimal()
set.seed(42)
# Konwersja dochodu na zmienną liczbową
dane_atlas_clear_no_na$Dochód <- as.numeric(as.character(dane_atlas_clear_no_na$Dochód))
# Kontynuuj z podziałem danych i modelowaniem
# Podział danych na treningowe i testowe (70%/30%)
train_indices <- sample(1:nrow(dane_atlas_clear_no_na), 0.7 * nrow(dane_atlas_clear_no_na))
train_data <- dane_atlas_clear_no_na[train_indices, ]
test_data <- dane_atlas_clear_no_na[-train_indices, ]
# Regresja logistyczna
log_model <- glm(Ryzyko_kredytowe ~ ., data = train_data, family = binomial)
# Predykcja na zbiorze testowym
log_preds <- predict(log_model, newdata = test_data, type = "response")
log_preds_class <- ifelse(log_preds > 0.5, 1, 0)
# Ocena modelu
library(caret)
confusionMatrix(as.factor(log_preds_class), as.factor(test_data$Ryzyko_kredytowe))
library(rpart)
library(rpart.plot)
# Trening drzewa decyzyjnego
tree_model <- rpart(Ryzyko_kredytowe ~ ., data = train_data, method = "class")
# Wizualizacja drzewa
rpart.plot(tree_model, type = 3, extra = 102)
# Predykcja
tree_preds <- predict(tree_model, newdata = test_data, type = "class")
# Ocena modelu
confusionMatrix(tree_preds, as.factor(test_data$Ryzyko_kredytowe))
set.seed(42)
# Kontynuuj z podziałem danych i modelowaniem
# Podział danych na treningowe i testowe (70%/30%)
train_indices <- sample(1:nrow(dane_atlas_clear_no_na), 0.7 * nrow(dane_atlas_clear_no_na))
train_data <- dane_atlas_clear_no_na[train_indices, ]
test_data <- dane_atlas_clear_no_na[-train_indices, ]
# Regresja logistyczna
log_model <- glm(Ryzyko_kredytowe ~ ., data = train_data, family = binomial)
# Predykcja na zbiorze testowym
log_preds <- predict(log_model, newdata = test_data, type = "response")
log_preds_class <- ifelse(log_preds > 0.5, 1, 0)
# Ocena modelu
library(caret)
confusionMatrix(as.factor(log_preds_class), as.factor(test_data$Ryzyko_kredytowe))
library(rpart)
library(rpart.plot)
# Trening drzewa decyzyjnego
tree_model <- rpart(Ryzyko_kredytowe ~ ., data = train_data, method = "class")
# Wizualizacja drzewa
rpart.plot(tree_model, type = 3, extra = 102)
# Predykcja
tree_preds <- predict(tree_model, newdata = test_data, type = "class")
# Ocena modelu
confusionMatrix(tree_preds, as.factor(test_data$Ryzyko_kredytowe))
library(randomForest)
install.packages("randomForest")
library(rpart)
library(rpart.plot)
# Trening drzewa decyzyjnego
tree_model <- rpart(Ryzyko_kredytowe ~ ., data = train_data, method = "class")
# Wizualizacja drzewa
rpart.plot(tree_model, type = 3, extra = 102)
# Predykcja
tree_preds <- predict(tree_model, newdata = test_data, type = "class")
# Ocena modelu
confusionMatrix(tree_preds, as.factor(test_data$Ryzyko_kredytowe))
library(randomForest)
# Trening lasu losowego
rf_model <- randomForest(as.factor(Ryzyko_kredytowe) ~ ., data = train_data, ntree = 100, mtry = 3)
# Predykcja
rf_preds <- predict(rf_model, newdata = test_data)
# Ocena modelu
confusionMatrix(rf_preds, as.factor(test_data$Ryzyko_kredytowe))
library(pROC)
# Regresja logistyczna
roc_log <- roc(test_data$Ryzyko_kredytowe, log_preds)
auc_log <- auc(roc_log)
# Drzewo decyzyjne
tree_probs <- predict(tree_model, newdata = test_data, type = "prob")[, 2]
roc_tree <- roc(test_data$Ryzyko_kredytowe, tree_probs)
auc_tree <- auc(roc_tree)
# Las losowy
rf_probs <- predict(rf_model, newdata = test_data, type = "prob")[, 2]
roc_rf <- roc(test_data$Ryzyko_kredytowe, rf_probs)
auc_rf <- auc(roc_rf)
# Wyświetlenie wyników
auc_log
auc_tree
auc_rf
library(rpart)
library(rpart.plot)
# Ustawienie parametrów drzewa
tree_model <- rpart(
Ryzyko_kredytowe ~ .,
data = train_data,
method = "class",
control = rpart.control(maxdepth = 10, minsplit = 2, minbucket = 1)
)
# Wizualizacja drzewa z większymi detalami
rpart.plot(
tree_model,
type = 3,            # Styl wizualizacji: wszystkie gałęzie
extra = 104,         # Wyświetlanie liczby obserwacji i procentu
under = TRUE,        # Wyświetlanie etykiet pod węzłami
faclen = 0,          # Nie skracaj nazw zmiennych
cex = 0.8            # Rozmiar tekstu
)
library(randomForest)
# Trening lasu losowego
rf_model <- randomForest(as.factor(Ryzyko_kredytowe) ~ ., data = train_data, ntree = 100, mtry = 3)
# Predykcja
rf_preds <- predict(rf_model, newdata = test_data)
# Ocena modelu
confusionMatrix(rf_preds, as.factor(test_data$Ryzyko_kredytowe))
library(rpart)
library(rpart.plot)
# Ustawienie parametrów drzewa
tree_model <- rpart(
Ryzyko_kredytowe ~ .,
data = train_data,
method = "class",
control = rpart.control(maxdepth = 10, minsplit = 2, minbucket = 1)
)
# Wizualizacja drzewa z większymi detalami
rpart.plot(
tree_model,
type = 3,            # Styl wizualizacji: wszystkie gałęzie
extra = 104,         # Wyświetlanie liczby obserwacji i procentu
under = TRUE,        # Wyświetlanie etykiet pod węzłami
faclen = 0,          # Nie skracaj nazw zmiennych
cex = 0.8            # Rozmiar tekstu
)
library(pROC)
# Regresja logistyczna
roc_log <- roc(test_data$Ryzyko_kredytowe, log_preds)
auc_log <- auc(roc_log)
# Drzewo decyzyjne
tree_probs <- predict(tree_model, newdata = test_data, type = "prob")[, 2]
roc_tree <- roc(test_data$Ryzyko_kredytowe, tree_probs)
auc_tree <- auc(roc_tree)
# Las losowy
rf_probs <- predict(rf_model, newdata = test_data, type = "prob")[, 2]
roc_rf <- roc(test_data$Ryzyko_kredytowe, rf_probs)
auc_rf <- auc(roc_rf)
# Wyświetlenie wyników
auc_log
auc_tree
auc_rf
# Drzewo decyzyjne z dodatkowymi zmiennymi
tree_model <- rpart(
Ryzyko_kredytowe ~ Wiek + Dochód + Dzieci + Zaległe_płatności + Historia_kredytowa + Typ_zatrudnienia + Edukacja + Miasto + Stan_małżeński,
data = train_data,
method = "class",
control = rpart.control(maxdepth = 10, minsplit = 2, minbucket = 1)
)
# Wizualizacja drzewa z dodatkowymi zmiennymi
rpart.plot(
tree_model,
type = 3,
extra = 104,
under = TRUE,
faclen = 0,
cex = 0.8
)
library(rpart)
library(rpart.plot)
# Ustawienie parametrów drzewa
tree_model <- rpart(
Ryzyko_kredytowe ~ .,
data = train_data,
method = "class",
control = rpart.control(maxdepth = 10, minsplit = 2, minbucket = 1)
)
# Wizualizacja drzewa z większymi detalami
rpart.plot(
tree_model,
type = 3,            # Styl wizualizacji: wszystkie gałęzie
extra = 104,         # Wyświetlanie liczby obserwacji i procentu
under = TRUE,        # Wyświetlanie etykiet pod węzłami
faclen = 0,          # Nie skracaj nazw zmiennych
cex = 0.8            # Rozmiar tekstu
)
library(rpart)
library(rpart.plot)
# Ustawienie parametrów drzewa
tree_model <- rpart(
Ryzyko_kredytowe ~ .,
data = train_data,
method = "class",
control = rpart.control(maxdepth = 10, minsplit = 2, minbucket = 1)
)
# Wizualizacja drzewa z większymi detalami
rpart.plot(tree_model)
library(rpart)
library(rpart.plot)
tree_model <- rpart(
Ryzyko_kredytowe ~ .,
data = train_data,
method = "class",
control = rpart.control(maxdepth = 10, minsplit = 2, minbucket = 1)
)
rpart.plot(tree_model)
library(rpart)
library(rpart.plot)
tree_model <- rpart(
Ryzyko_kredytowe ~ .,
data = train_data,
method = "class",
control = rpart.control(maxdepth = 10, minsplit = 2, minbucket = 1)
)
rpart.plot(tree_model)
library(randomForest)
# Trening lasu losowego
rf_model <- randomForest(as.factor(Ryzyko_kredytowe) ~ ., data = train_data, ntree = 100, mtry = 3)
# Predykcja
rf_preds <- predict(rf_model, newdata = test_data)
# Ocena modelu
confusionMatrix(rf_preds, as.factor(test_data$Ryzyko_kredytowe))
library(pROC)
# Regresja logistyczna
roc_log <- roc(test_data$Ryzyko_kredytowe, log_preds)
auc_log <- auc(roc_log)
# Drzewo decyzyjne
tree_probs <- predict(tree_model, newdata = test_data, type = "prob")[, 2]
roc_tree <- roc(test_data$Ryzyko_kredytowe, tree_probs)
auc_tree <- auc(roc_tree)
# Las losowy
rf_probs <- predict(rf_model, newdata = test_data, type = "prob")[, 2]
roc_rf <- roc(test_data$Ryzyko_kredytowe, rf_probs)
auc_rf <- auc(roc_rf)
# Wyświetlenie wyników
auc_log
auc_tree
auc_rf
set.seed(42)
# Podział danych na treningowe i testowe (70%/30%)
train_indices <- sample(1:nrow(dane_atlas_clear_no_na), 0.7 * nrow(dane_atlas_clear_no_na))
train_data <- dane_atlas_clear_no_na[train_indices, ]
test_data <- dane_atlas_clear_no_na[-train_indices, ]
# Regresja logistyczna
log_model <- glm(Ryzyko_kredytowe ~ ., data = train_data, family = binomial)
# Predykcja na zbiorze testowym
log_preds <- predict(log_model, newdata = test_data, type = "response")
log_preds_class <- ifelse(log_preds > 0.5, 1, 0)
# Ocena modelu
library(caret)
confusionMatrix(as.factor(log_preds_class), as.factor(test_data$Ryzyko_kredytowe))
filtered_data_atlas_clear <- subset(dane_atlas_clear, Ryzyko_kredytowe == 0)
ggplot(filtered_data_atlas_clear, aes(x = "", y = Wiek)) +
geom_violin(fill = "pink", alpha = 0.7, color = "black") +  # Violin Plot
geom_boxplot(width = 0.2, fill = "skyblue", color = "black", outlier.shape = NA) +
labs(title = "Rozkład wieku osób bez ryzyka kredytowego", y = "Wiek", x = "") +
theme_minimal()
knitr::opts_chunk$set(echo= TRUE,ache=TRUE, warning=F, message = F)
echo = FALSE
library(tidyverse) #cleaning
library(esquisse)
library(knitr)
library(dplyr)
library(ggcorrplot)
library(vcd)
library(purrr) #cleaning
library(repurrrsive)
library(datarium)
library(ggeasy)
library(rio) #wczytywanie plików
library(rvest) #scrappowanie
library(caret)
# Importowanie danych
dane_atlas <- import("data_atlas.csv")
# Zamiana pustych pól na NA
dane_atlas[dane_atlas == ""] <- NA
# Tworzenie nowej ramki danych z przekształconymi kolumnami
dane_atlas_clear <- data.frame(
Wiek = dane_atlas$age,
Dochód = as.numeric(gsub(" złoty", "", dane_atlas$income)),
Dzieci = as.integer(
gsub(" dzieci", "",
recode(dane_atlas$children, "brak" = "0 dzieci"))
),
Historia_kredytowa = dane_atlas$credit_history,
Zaległe_płatności = as.integer(
recode(dane_atlas$overdue_payments,
"opóźnienia" = "1",
"brak opóźnień" = "0",
"2" = "1",
"3" = "1")
),
Wartość_aktywów = as.numeric(
gsub(" złoty", "", dane_atlas$assets_value)
),
Posiada_własność = as.integer(
recode(dane_atlas$owns_property,
"tak" = "1",
"nie" = "0")
),
Aktywne_pożyczki = dane_atlas$active_loans,
Lata_w_pracy = dane_atlas$years_in_job,
Typ_zatrudnienia = dane_atlas$employment_type,
Inne_pożyczki = dane_atlas$other_loans,
Edukacja = dane_atlas$education,
Miasto = dane_atlas$city,
Stan_małżeński = dane_atlas$marital_status,
# Zaokrąglenie kolumny Wskaźnik_wsparcia do dwóch miejsc po przecinku
Wskaźnik_wsparcia = round(dane_atlas$support_indicator, 2),
Ryzyko_kredytowe = dane_atlas$credit_risk
)
# Aktualizacja kolumny 'Ryzyko_kredytowe' na podstawie warunków
dane_atlas_clear$Ryzyko_kredytowe <- ifelse(
apply(dane_atlas_clear, 1, function(w) any(is.na(w))) & dane_atlas_clear$Ryzyko_kredytowe == 0,
1,
dane_atlas_clear$Ryzyko_kredytowe
)
dane_atlas_clear_no_na <- na.omit(dane_atlas_clear)
filtered_data_atlas_clear <- subset(dane_atlas_clear, Ryzyko_kredytowe == 0)
ggplot(filtered_data_atlas_clear, aes(x = "", y = Wiek)) +
geom_violin(fill = "pink", alpha = 0.7, color = "black") +  # Violin Plot
geom_boxplot(width = 0.2, fill = "skyblue", color = "black", outlier.shape = NA) +
labs(title = "Rozkład wieku osób bez ryzyka kredytowego", y = "Wiek", x = "") +
theme_minimal()
set.seed(42)
# Podział danych na treningowe i testowe (70%/30%)
train_indices <- sample(1:nrow(dane_atlas_clear_no_na), 0.7 * nrow(dane_atlas_clear_no_na))
train_data <- dane_atlas_clear_no_na[train_indices, ]
test_data <- dane_atlas_clear_no_na[-train_indices, ]
set.seed(42)
# Podział danych na treningowe i testowe (70%/30%)
train_indices <- sample(1:nrow(dane_atlas_clear_no_na), 0.7 * nrow(dane_atlas_clear_no_na))
train_data <- dane_atlas_clear_no_na[train_indices, ]
test_data <- dane_atlas_clear_no_na[-train_indices, ]
dane_atlas_clear_no_na <- na.omit(dane_atlas_clear)
